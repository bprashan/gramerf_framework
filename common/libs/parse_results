


def parse_csv_res_files(self, tcd):
    csv_test_res_folder = os.path.join(PERF_RESULTS_DIR, tcd['workload_name'], tcd['test_name'])
    os.chdir(csv_test_res_folder)
    csv_files = glob.glob1(csv_test_res_folder, "*.csv")
    
    if len(csv_files) != (len(tcd['exec_mode']) * tcd['iterations']):
        raise Exception(f"\n-- Number of test result files - {len(csv_files)} is not equal to the expected number - {len(tcd['exec_mode']) * tcd['iterations']}.\n")

    global trd
    test_dict_throughput = {}
    test_dict_latency = {}
    for e_mode in tcd['exec_mode']:
        test_dict_throughput[e_mode] = []
        test_dict_latency[e_mode] = []
    
    avg_latency = 0
    avg_throughput = 0
    for filename in csv_files:
        with open(filename, "r") as f:
            for row in f.readlines():
                row = row.split()
                if row:
                    if "Totals" in row[0]:
                        avg_latency = row[5]
                        avg_throughput = row[-1]
                        break

            if "native" in filename:
                test_dict_latency['native'].append(float(avg_latency))
                test_dict_throughput['native'].append(float(avg_throughput))
            elif "graphene_sgx" in filename:
                test_dict_latency['gramine-sgx'].append(float(avg_latency))
                test_dict_throughput['gramine-sgx'].append(float(avg_throughput))
            else:
                test_dict_latency['gramine-direct'].append(float(avg_latency))
                test_dict_throughput['gramine-direct'].append(float(avg_throughput))

    if 'native' in tcd['exec_mode']:
        test_dict_latency['native-avg'] = '{:0.3f}'.format(sum(test_dict_latency['native'])/len(test_dict_latency['native']))
        test_dict_throughput['native-avg'] = '{:0.3f}'.format(sum(test_dict_throughput['native'])/len(test_dict_throughput['native']))

    if 'gramine-direct' in tcd['exec_mode']:
        test_dict_latency['direct-avg'] = '{:0.3f}'.format(
            sum(test_dict_latency['gramine-direct'])/len(test_dict_latency['gramine-direct']))
        test_dict_throughput['direct-avg'] = '{:0.3f}'.format(
            sum(test_dict_throughput['gramine-direct'])/len(test_dict_throughput['gramine-direct']))
        if 'native' in tcd['exec_mode']:
            test_dict_latency['direct-deg'] = utils.percent_degradation(test_dict_latency['native-avg'], test_dict_latency['direct-avg'])
            test_dict_throughput['direct-deg'] = utils.percent_degradation(test_dict_throughput['native-avg'], test_dict_throughput['direct-avg'])

    if 'gramine-sgx' in tcd['exec_mode']:
        test_dict_latency['sgx-avg'] = '{:0.3f}'.format(sum(test_dict_latency['gramine-sgx'])/len(test_dict_latency['gramine-sgx']))
        test_dict_throughput['sgx-avg'] = '{:0.3f}'.format(sum(test_dict_throughput['gramine-sgx'])/len(test_dict_throughput['gramine-sgx']))
        if 'native' in tcd['exec_mode']:
            test_dict_latency['sgx-deg'] = utils.percent_degradation(test_dict_latency['native-avg'], test_dict_latency['sgx-avg'])
            test_dict_throughput['sgx-deg'] = utils.percent_degradation(test_dict_throughput['native-avg'], test_dict_throughput['sgx-avg'])

    trd[tcd['workload_name']] = trd.get(tcd['workload_name'], {})
    trd[tcd['workload_name']].update({tcd['test_name']+'_latency': test_dict_latency})
    trd[tcd['workload_name']].update({tcd['test_name']+'_throughput': test_dict_throughput})

    os.chdir(self.workload_home_dir)

def process_results(self, tcd):
    csv_res_folder = os.path.join(PERF_RESULTS_DIR, tcd['workload_name'])
    if not os.path.exists(csv_res_folder): os.makedirs(csv_res_folder)

    # Copy test results folder from client to local server results folder.
    client_res_folder = os.path.join(tcd['client_results_path'], tcd['test_name'])
    client_scp_path = tcd['client_username'] + "@" + tcd['client_ip'] + ":" + client_res_folder
    copy_client_to_server_cmd = f"sshpass -e scp -r {client_scp_path} {csv_res_folder}"
    utils.exec_shell_cmd(copy_client_to_server_cmd)

    # Parse the individual csv result files and update the global test results dict.
    self.parse_csv_res_files(tcd)
